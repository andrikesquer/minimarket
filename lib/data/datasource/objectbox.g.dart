// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../domain/entities/cart_item_entity.dart';
import '../../domain/entities/customer_entity.dart';
import '../../domain/entities/product_entity.dart';
import '../../domain/entities/shop_order_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 4069518710580421496),
    name: 'Product',
    lastPropertyId: const obx_int.IdUid(4, 1287207300802439373),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7372166146367976849),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7759380445877335498),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8870171057963096460),
        name: 'price',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1287207300802439373),
        name: 'stock',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 2021806993958033204),
    name: 'Customer',
    lastPropertyId: const obx_int.IdUid(2, 988289822291198474),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1867719188679199380),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 988289822291198474),
        name: 'email',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 8297637158628023536),
    name: 'ShopOrder',
    lastPropertyId: const obx_int.IdUid(7, 1985901699857978631),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 873488959964921003),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3919598691414241277),
        name: 'quantities',
        type: 27,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2583023907015098721),
        name: 'subtotals',
        type: 29,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3128506320487129245),
        name: 'total',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5051609963336666616),
        name: 'date',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1985901699857978631),
        name: 'products',
        type: 27,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(5, 9062814289212793740),
        name: 'product',
        targetId: const obx_int.IdUid(1, 4069518710580421496),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 8918489474246922459),
    name: 'CartItem',
    lastPropertyId: const obx_int.IdUid(5, 5274186767580633736),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7810483250880475597),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1181882732420952882),
        name: 'productId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7063162282713663832),
        name: 'productName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7474840084685493169),
        name: 'productPrice',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5274186767580633736),
        name: 'productQuantity',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(5, 8918489474246922459),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(5, 9062814289212793740),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [6052982839463974521],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      4662987507538912912,
      3942957084541816216,
      8999047551062603793,
      6212154308534194624,
      3176865753593650190,
      2529076021811868169,
    ],
    retiredRelationUids: const [
      7326737848727990960,
      4072804466703406705,
      2842662371478655299,
    ],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Product: obx_int.EntityDefinition<Product>(
      model: _entities[0],
      toOneRelations: (Product object) => [],
      toManyRelations: (Product object) => {},
      getId: (Product object) => object.id,
      setId: (Product object, int id) {
        object.id = id;
      },
      objectToFB: (Product object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addFloat64(2, object.price);
        fbb.addInt64(3, object.stock);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final priceParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final stockParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final object = Product(
          id: idParam,
          name: nameParam,
          price: priceParam,
          stock: stockParam,
        );

        return object;
      },
    ),
    Customer: obx_int.EntityDefinition<Customer>(
      model: _entities[1],
      toOneRelations: (Customer object) => [],
      toManyRelations: (Customer object) => {},
      getId: (Customer object) => object.id,
      setId: (Customer object, int id) {
        object.id = id;
      },
      objectToFB: (Customer object, fb.Builder fbb) {
        final emailOffset = fbb.writeString(object.email);
        fbb.startTable(3);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, emailOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = Customer(id: idParam, email: emailParam);

        return object;
      },
    ),
    ShopOrder: obx_int.EntityDefinition<ShopOrder>(
      model: _entities[2],
      toOneRelations: (ShopOrder object) => [],
      toManyRelations:
          (ShopOrder object) => {
            obx_int.RelInfo<ShopOrder>.toMany(5, object.id): object.product,
          },
      getId: (ShopOrder object) => object.id,
      setId: (ShopOrder object, int id) {
        object.id = id;
      },
      objectToFB: (ShopOrder object, fb.Builder fbb) {
        final quantitiesOffset = fbb.writeListInt64(object.quantities);
        final subtotalsOffset = fbb.writeListFloat64(object.subtotals);
        final productsOffset = fbb.writeListInt64(object.products);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, quantitiesOffset);
        fbb.addOffset(2, subtotalsOffset);
        fbb.addFloat64(4, object.total);
        fbb.addInt64(5, object.date.millisecondsSinceEpoch);
        fbb.addOffset(6, productsOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final productsParam = const fb.ListReader<int>(
          fb.Int64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 16, []);
        final quantitiesParam = const fb.ListReader<int>(
          fb.Int64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 6, []);
        final subtotalsParam = const fb.ListReader<double>(
          fb.Float64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 8, []);
        final dateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
        );
        final totalParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final object = ShopOrder(
          id: idParam,
          products: productsParam,
          quantities: quantitiesParam,
          subtotals: subtotalsParam,
          date: dateParam,
          total: totalParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<ShopOrder>(
          object.product,
          store,
          obx_int.RelInfo<ShopOrder>.toMany(5, object.id),
        );
        return object;
      },
    ),
    CartItem: obx_int.EntityDefinition<CartItem>(
      model: _entities[3],
      toOneRelations: (CartItem object) => [],
      toManyRelations: (CartItem object) => {},
      getId: (CartItem object) => object.id,
      setId: (CartItem object, int id) {
        object.id = id;
      },
      objectToFB: (CartItem object, fb.Builder fbb) {
        final productNameOffset = fbb.writeString(object.productName);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.productId);
        fbb.addOffset(2, productNameOffset);
        fbb.addFloat64(3, object.productPrice);
        fbb.addInt64(4, object.productQuantity);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final productIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final productNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final productPriceParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final productQuantityParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final object = CartItem(
          id: idParam,
          productId: productIdParam,
          productName: productNameParam,
          productPrice: productPriceParam,
          productQuantity: productQuantityParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// See [Product.id].
  static final id = obx.QueryIntegerProperty<Product>(
    _entities[0].properties[0],
  );

  /// See [Product.name].
  static final name = obx.QueryStringProperty<Product>(
    _entities[0].properties[1],
  );

  /// See [Product.price].
  static final price = obx.QueryDoubleProperty<Product>(
    _entities[0].properties[2],
  );

  /// See [Product.stock].
  static final stock = obx.QueryIntegerProperty<Product>(
    _entities[0].properties[3],
  );
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// See [Customer.id].
  static final id = obx.QueryIntegerProperty<Customer>(
    _entities[1].properties[0],
  );

  /// See [Customer.email].
  static final email = obx.QueryStringProperty<Customer>(
    _entities[1].properties[1],
  );
}

/// [ShopOrder] entity fields to define ObjectBox queries.
class ShopOrder_ {
  /// See [ShopOrder.id].
  static final id = obx.QueryIntegerProperty<ShopOrder>(
    _entities[2].properties[0],
  );

  /// See [ShopOrder.quantities].
  static final quantities = obx.QueryIntegerVectorProperty<ShopOrder>(
    _entities[2].properties[1],
  );

  /// See [ShopOrder.subtotals].
  static final subtotals = obx.QueryDoubleVectorProperty<ShopOrder>(
    _entities[2].properties[2],
  );

  /// See [ShopOrder.total].
  static final total = obx.QueryDoubleProperty<ShopOrder>(
    _entities[2].properties[3],
  );

  /// See [ShopOrder.date].
  static final date = obx.QueryDateProperty<ShopOrder>(
    _entities[2].properties[4],
  );

  /// See [ShopOrder.products].
  static final products = obx.QueryIntegerVectorProperty<ShopOrder>(
    _entities[2].properties[5],
  );

  /// see [ShopOrder.product]
  static final product = obx.QueryRelationToMany<ShopOrder, Product>(
    _entities[2].relations[0],
  );
}

/// [CartItem] entity fields to define ObjectBox queries.
class CartItem_ {
  /// See [CartItem.id].
  static final id = obx.QueryIntegerProperty<CartItem>(
    _entities[3].properties[0],
  );

  /// See [CartItem.productId].
  static final productId = obx.QueryIntegerProperty<CartItem>(
    _entities[3].properties[1],
  );

  /// See [CartItem.productName].
  static final productName = obx.QueryStringProperty<CartItem>(
    _entities[3].properties[2],
  );

  /// See [CartItem.productPrice].
  static final productPrice = obx.QueryDoubleProperty<CartItem>(
    _entities[3].properties[3],
  );

  /// See [CartItem.productQuantity].
  static final productQuantity = obx.QueryIntegerProperty<CartItem>(
    _entities[3].properties[4],
  );
}
